#!/bin/bash
# Copyright (C) 2012, Michal Zielinski <michal@zielinscy.org.pl>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

die() {
    echo -e '\033[01;31m'$1'\033[00m'
    exit 1
}

trap exit SIGQUIT

help() {
    echo "$0 [--help|--task-binary val|--test-name val|--quiet|--all|--debug test-name|--generate-out brut_binary] [taskname]"
}

test_all() {
    [ -e .tasks ] || die "file .tasks with task names doesn't exist"
    for name in $(cat .tasks); do
        ./ocen --quiet $name
    done
}

while [ "$1" != "" ]; do
    if [ "$1" = "--help" -o "$1" = '-h' ]; then
        help
        exit
    elif [ "$1" = "--task-binary" ]; then
        shift
        export TASK_BINARY="$1"
        shift
    elif [ "$1" == "--test-name" ]; then
        shift
        export TESTNAME="$1"
        shift
    elif [ "$1" == "--quiet" ]; then
        export QUIET=1
        shift
    elif [ "$1" == "--debug" ]; then
        shift
        export debug="$1"
        shift
    elif [ "$1" == "--generate-out" ]; then
	    shift
        export generate_out="$1"
        shift
    elif [ "$2" == "" ]; then
        break # task name
    else
        echo -e "\033[01;31mbad option $1\033[00m"
        help
        exit
    fi
done

if [ "$1" != "" ]; then
    cd $1 || die "cd $1 failed"
fi
task="$(basename $(pwd))"
if [ ! -e "$task.cpp" ]; then
    if [ -e .tasks ]; then
        test_all
        exit
    fi
    die "no task source file $task.cpp"
fi

if [ "$generate_out" != "" ]; then
    echo "generating missing outputs for $task using $generate_out..."
    for t in *.in; do
	    base=$(basename $t .in)
	    if [ ! -e "$base.out" ]; then
	        echo -n "$base.out... "
	        /usr/bin/time -f %E sh -c "./$generate_out < $base.in > $base.out.tmp" 2> .tmp.time
	        if [ $? = 0 ]; then
		        echo `cat .tmp.time` ok
		        mv $base.out.tmp $base.out
	        else
		        echo fail
		        rm $base.out.tmp
		        exit
	        fi
	    fi
    done
    echo 'done.'
    exit
fi

if [ ! -e Makefile ]; then
	printf "%s: %s.cpp\n\tg++ %s.cpp -o %s -g -Wall\nocen: %s" $task $task $task $task > Makefile
fi
make "$task" CFLAGS=-DNDEBUG >/dev/null || die "compilation failed"
if [ "$TASK_BINARY" != "" ]; then
	[ -x $TASK_BINARY ] || die "task binary is not executable"
	task_bin=$TASK_BINARY
	echo -e '\033[01;31m'testing $task_bin'\033[00m'
else
	task_bin=$task
fi

if [ "$debug" != "" ]; then
    /usr/bin/time -f %E sh -c "./$task_bin ./$task_bin < $debug.in"
    exit $?
fi

ok=false
for t in *.in; do
	if [ -e "$t" ]; then
		ok=true
	fi
done

[ $ok = true ] || die "no tests found"
if [ "$TESTNAME" != "" -a ! -e "$TESTNAME.in" ]; then
    die "test $TESTNAME does not exist"
fi
[ -x /usr/bin/time ] || die "/usr/bin/time doesn't exist (maybe apt-get install time ?)"
echo -e "\033[01;35m ------------------- TESTING $task ------------------- \033[00m"
printed_to_stderr=0
all_ok=1
if [ "$QUIET" != "" ]; then
    quiet=1
else
    quiet=0
fi
TIMEOUT=5
for t in *.in; do
    base=$(basename $t .in)
    if [ "$TESTNAME" != "" -a "$TESTNAME" != "$base" ]; then
        continue
    fi
    [ $quiet = 0 ] && printf "\033[01;37mtesting $base... \033[00m"
    ulimit -S -t $TIMEOUT
	ulimit -s unlimited
    /usr/bin/time -f %E sh -c "./$task_bin < $t > tmp 2>tmp.out" 2> tmp.time
    ok=$?
    ulimit -S -t 200
    if [ $ok = 130 ]; then
        echo -e '\033[01;31mcancelled (to cancel everything press Ctrl-|)\033[00m'
        all_ok=2
        continue
    elif [ $ok = 152 ]; then
        echo -e '\033[01;31mfail (timeout '$TIMEOUT' s)\033[00m'
        all_ok=0
        failed=$(($failed+1))
        continue
    elif [ $ok != 0 ]; then
        if [ $quiet = 0 ]; then
            echo -e '\033[01;31mfail (exit code '$ok')\033[00m'
        else
            echo -e '\033[01;31mtest '$base' failed (exit code '$ok')\033[00m'
        fi
        all_ok=0
        failed=$(($failed+1))
        continue
    fi
	[ $quiet = 0 ] && printf "%s" "$(cat tmp.time)"
    if [ ! -e $base.out -a ! -e verify ]; then
        echo -e " \033[01;31moutput not found\033[00m"
        all_ok=2
        continue
    fi
    if [ ! -e verify ]; then
        diff -w tmp $base.out > tmp.diff # diff -bsq ?
        ok=$?
        [ $quiet = 0 ] && head -c 150 < tmp.diff > tmp.ver
    else
        ./verify $t tmp $base.out > tmp.ver
        ok=$?
    fi
    if [ $ok = 0 ]; then
        [ $quiet = 0 ] && echo -e ' \033[01;36mok\033[00m'
    else
        if [ $quiet = 0 ]; then
            echo -e ' \033[01;31mfail\033[00m'
        else
            echo -e ' \033[01;31mtest '$base' failed\033[00m'
        fi
        all_ok=0
        failed=$(($failed+1))
        cat tmp.ver
    fi

    if [ "$(wc --bytes < tmp.out)" != 0 ]; then
        printed_to_stderr=1
    fi
done
if [ $printed_to_stderr = 1 ]; then
    echo -e "\033[01;31mwarning: program printed into stderr\033[00m"
fi
if [ $all_ok = 1 -a "$TESTNAME" != "" ]; then
    all_ok=2
fi
if [ $all_ok = 2 ]; then
    echo -e "\033[01;33m ------------------ $task UNKNOWN -------------------- \033[00m"
elif [ $all_ok = 1 ]; then
    echo -e "\033[01;32m --------------------- $task OK ---------------------- \033[00m"
else
    echo "$failed tests failed"
    echo -e "\033[01;31m -------------------- $task FAIL --------------------- \033[00m"
fi
